name: Deployment to AWS server

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: Pull Request Number
        required: true
        type: number

jobs:
  #====================================================================
  # Validate if the provided PR number is correct.
  # If validation fails, thorw error and fail the deployment workflow
  # If everything is OK, send PR branch name to next step
  #====================================================================
  validate-pr-number:
    name: Validate PR number from input
    runs-on: ubuntu-latest
    outputs:
      pr-branch: ${{steps.get-pull-request.outputs.result}}
    steps:
      - name: Validate PR number
        uses: actions/github-script@v7
        id: get-pull-request
        with:
          result-encoding: string
          script: |
            try {
              const { data: response } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: ${{ github.event.inputs.pr_number }}, 
              })
              
              if (response.number !== ${{ github.event.inputs.pr_number }}) {
                throw new Error('Provided PR number is invalid.')
              }

              if (response.state !== 'open' || response.mergeable_state === 'blocked') {
                throw new Error('Either the PR is closed or not in the mergeable state.')
              }
              
              return response.head.ref
            } catch (err) {
              console.log(err)
              throw new Error('Error fetching PR details')
            }

  #====================================================================
  # Install dependencies and cache
  #====================================================================
  build:
    name: Build project
    runs-on: ubuntu-latest
    needs: [validate-pr-number]
    defaults:
      run:
        working-directory: ./web/
    steps:
      - name: Checkout the branch for validate-pr-number job
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate-pr-number.outputs.pr-branch }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache node modules
        id: cache-dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/yarn
            node_modules
            build
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies if no cache hit
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: |
          yarn
          yarn build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          path: |
            package.json
            yarn.lock
            dist/

  #====================================================================
  # Setup terraform with version 1.9.5
  #====================================================================
  setup-terraform:
    name: Setup terraform
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write # This is required for requesting the JWT
    steps:
      - name: Checkout terraform repository
        env:
          terraform-repository: ${{github.event.repository.owner.login}}/terraform-demo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.terraform-repository }}
          ref: main
          path: terraform-repo

      - name: Install terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Verify terraform
        run: |
          set -e
          terraform version
          which terraform

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::827040639836:role/gh-workflow-deployments
          aws-region: ap-south-1

      - name: Execute terraform
        id: apply-terraform
        working-directory: terraform-repo/create-resource
        run: |
          set -e
          terraform init
          terraform validate
          terraform plan
          terraform apply -auto-approve
          echo "ec2_public_ip=$(terraform output -raw instance_public_ip)" >> $GITHUB_ENV
          echo "ec2_public_dns=$(terraform output -raw instance_public_dns)" >> $GITHUB_ENV

    outputs:
      ec2_public_ip: "${{ env.ec2_public_ip }}"
      ec2_public_dns: "${{ env.ec2_public_dns }}"

  #====================================================================
  # Configure ec2 instance returned for previous job
  #====================================================================
  configure-ec2-instance:
    name: Configure ec2 instance
    runs-on: ubuntu-latest
    needs: [setup-terraform, build]

    steps:
      - name: Configure ssh agent
        run: |
          echo "${{ needs.setup-terraform.outputs.ec2_public_ip }}"
          echo "${{ needs.setup-terraform.outputs.ec2_public_dns }}"
